{"ast":null,"code":"import { call, all, takeLatest, put } from \"redux-saga/effects\";\nimport userTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signUpSuccess, signUpFailure, signInSuccess, signInFailure, signOutSuccess, signOutFailure } from \"./user-actions\"; // sign up logic\n\nexport function* signUp({\n  payload: {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  }\n}) {\n  if (password !== confirmPassword) {\n    yield put(signUpFailure(\"Passwords do not match!\"));\n    return;\n  }\n\n  const {\n    user\n  } = yield auth.createUserWithEmailAndPassword(email, password);\n\n  try {\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* onSignUp() {\n  yield takeLatest(userTypes.SIGN_UP_START, signUp);\n} // sign in logic\n\nexport function* getSnapshotFromUserRef(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    console.log(userSnapshot);\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserRef(user, additionalData);\n}\nexport function* signInGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserRef(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserRef(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onSignInAfterSignUp() {\n  yield takeLatest(userTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, signInGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, signInEmail);\n} // user persistence logic\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserRef(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // sign out logic\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure());\n  }\n}\nexport function* onSignOut() {\n  yield takeLatest(userTypes.SIGN_OUT_START, signOut);\n} // listenning to and exporting all user sagas to the root saga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOut), call(onSignUp), call(onSignInAfterSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/hammi/Desktop/react/barca-market/client/src/redux/user/user-sagas.js"],"names":["call","all","takeLatest","put","userTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signUpSuccess","signUpFailure","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUp","payload","displayName","email","password","confirmPassword","user","createUserWithEmailAndPassword","additionalData","error","onSignUp","SIGN_UP_START","getSnapshotFromUserRef","userAuth","userRef","userSnapshot","get","console","log","id","data","signInAfterSignUp","signInGoogle","signInWithPopup","signInEmail","signInWithEmailAndPassword","onSignInAfterSignUp","SIGN_UP_SUCCESS","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOut","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { call, all, takeLatest, put } from \"redux-saga/effects\";\r\n\r\nimport userTypes from \"./user.types\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport {\r\n  signUpSuccess,\r\n  signUpFailure,\r\n  signInSuccess,\r\n  signInFailure,\r\n  signOutSuccess,\r\n  signOutFailure,\r\n} from \"./user-actions\";\r\n\r\n// sign up logic\r\nexport function* signUp({\r\n  payload: { displayName, email, password, confirmPassword },\r\n}) {\r\n  if (password !== confirmPassword) {\r\n    yield put(signUpFailure(\"Passwords do not match!\"));\r\n    return;\r\n  }\r\n  const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n  try {\r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  } catch (error) {\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onSignUp() {\r\n  yield takeLatest(userTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\n// sign in logic\r\nexport function* getSnapshotFromUserRef(userAuth, additionalData) {\r\n  try {\r\n    const userRef = yield call(\r\n      createUserProfileDocument,\r\n      userAuth,\r\n      additionalData\r\n    );\r\n    const userSnapshot = yield userRef.get();\r\n    console.log(userSnapshot);\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\r\n  yield getSnapshotFromUserRef(user, additionalData);\r\n}\r\n\r\nexport function* signInGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserRef(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* signInEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserRef(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onSignInAfterSignUp() {\r\n  yield takeLatest(userTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, signInGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, signInEmail);\r\n}\r\n\r\n// user persistence logic\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return;\r\n    yield getSnapshotFromUserRef(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(userTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\n// sign out logic\r\nexport function* signOut() {\r\n  try {\r\n    yield auth.signOut();\r\n    yield put(signOutSuccess());\r\n  } catch (error) {\r\n    yield put(signOutFailure());\r\n  }\r\n}\r\n\r\nexport function* onSignOut() {\r\n  yield takeLatest(userTypes.SIGN_OUT_START, signOut);\r\n}\r\n\r\n// listenning to and exporting all user sagas to the root saga\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOut),\r\n    call(onSignUp),\r\n    call(onSignInAfterSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}