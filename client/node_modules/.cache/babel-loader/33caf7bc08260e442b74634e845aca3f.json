{"ast":null,"code":"import { call, all, takeLatest, put } from \"redux-saga/effects\";\nimport userTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure } from \"./user-actions\";\nexport function* getSnapshotFromUserRef(user) {}\nexport function* signInGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n\n    try {\n      const userRef = yield call(createUserProfileDocument, user);\n      const userSnapshot = yield userRef.get();\n      yield put(signInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot\n      }));\n    } catch (error) {\n      yield put(signInFailure(error));\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n\n    try {\n      const userRef = yield call(createUserProfileDocument, user);\n      const userSnapshot = yield userRef.get();\n      yield put(signInSuccess({\n        id: userSnapshot.id,\n        ...userSnapshot\n      }));\n    } catch (error) {\n      yield put(signInFailure(error));\n    }\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, signInGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, signInEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/hammi/Desktop/react/barca-market/src/redux/user/user-sagas.js"],"names":["call","all","takeLatest","put","userTypes","auth","googleProvider","createUserProfileDocument","signInSuccess","signInFailure","getSnapshotFromUserRef","user","signInGoogle","signInWithPopup","userRef","userSnapshot","get","id","error","signInEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,QAIO,+BAJP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,sBAAV,CAAiCC,IAAjC,EAAuC,CAAE;AAEhD,OAAO,UAAUC,YAAV,GAAyB;AAC9B,MAAI;AACF,UAAM;AAAED,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACQ,eAAL,CAAqBP,cAArB,CAAvB;;AACA,QAAI;AACF,YAAMQ,OAAO,GAAG,MAAMd,IAAI,CAACO,yBAAD,EAA4BI,IAA5B,CAA1B;AACA,YAAMI,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,YAAMb,GAAG,CAACK,aAAa,CAAC;AAAES,QAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,WAAGF;AAA1B,OAAD,CAAd,CAAT;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACd,YAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF,GATD,CASE,OAAOA,KAAP,EAAc;AACd,UAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AACD,OAAO,UAAUC,WAAV,CAAsB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAAtB,EAAwD;AAC7D,MAAI;AACF,UAAM;AAAEX,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;;AACA,QAAI;AACF,YAAMR,OAAO,GAAG,MAAMd,IAAI,CAACO,yBAAD,EAA4BI,IAA5B,CAA1B;AACA,YAAMI,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,YAAMb,GAAG,CAACK,aAAa,CAAC;AAAES,QAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,WAAGF;AAA1B,OAAD,CAAd,CAAT;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACd,YAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF,GATD,CASE,OAAOA,KAAP,EAAc;AACd,UAAMf,GAAG,CAACM,aAAa,CAACS,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUM,mBAAV,GAAgC;AACrC,QAAMtB,UAAU,CAACE,SAAS,CAACqB,oBAAX,EAAiCb,YAAjC,CAAhB;AACD;AAED,OAAO,UAAUc,kBAAV,GAA+B;AACpC,QAAMxB,UAAU,CAACE,SAAS,CAACuB,mBAAX,EAAgCR,WAAhC,CAAhB;AACD;AAED,OAAO,UAAUS,SAAV,GAAsB;AAC3B,QAAM3B,GAAG,CAAC,CAACD,IAAI,CAACwB,mBAAD,CAAL,EAA4BxB,IAAI,CAAC0B,kBAAD,CAAhC,CAAD,CAAT;AACD","sourcesContent":["import { call, all, takeLatest, put } from \"redux-saga/effects\";\r\n\r\nimport userTypes from \"./user.types\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport { signInSuccess, signInFailure } from \"./user-actions\";\r\n\r\nexport function* getSnapshotFromUserRef(user) {}\r\n\r\nexport function* signInGoogle() {\r\n  try {\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    try {\r\n      const userRef = yield call(createUserProfileDocument, user);\r\n      const userSnapshot = yield userRef.get();\r\n      yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot }));\r\n    } catch (error) {\r\n      yield put(signInFailure(error));\r\n    }\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\nexport function* signInEmail({ payload: { email, password } }) {\r\n  try {\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    try {\r\n      const userRef = yield call(createUserProfileDocument, user);\r\n      const userSnapshot = yield userRef.get();\r\n      yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot }));\r\n    } catch (error) {\r\n      yield put(signInFailure(error));\r\n    }\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(userTypes.GOOGLE_SIGN_IN_START, signInGoogle);\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(userTypes.EMAIL_SIGN_IN_START, signInEmail);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}